
https://learn.microsoft.com/en-us/answers/questions/1496389/how-to-create-a-mssql-database-within-mssql-server


> kubectl create namespace bookapp

> kubectl apply -f kubernetes

After you crete all your pods


In order to see logs you donot have to run any command to see logd fro each pod you can directly see them in the docker desktop container section by clicking on each deployments. In case if you are using docker-desktop kubernetes.


> kubectl get pods -n bookapp
NAME                                           READY   STATUS    RESTARTS      AGE
api-deployment-8664c4b546-xxh6j                1/1     Running   1 (28m ago)   33m
frontend-deployment-bookapp-665c74dc56-rvvz7   1/1     Running   0             19s
mssql-deployment-bookapp-547f6b8bcd-vdprc      1/1     Running   1 (28m ago)   33m

> kubectl get svc -n bookapp
NAME                       TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
api-service-bookapp        ClusterIP      10.111.252.165   <none>        80/TCP           46m
frontend-service-bookapp   ClusterIP      10.103.41.184    <none>        3000/TCP         46m
mssql-service-bookapp      LoadBalancer   10.106.177.201   localhost     1433:30611/TCP   46m

now we have intentionally made our sql pod service as a LoadBalancer. We could have made it as ClusterIP that will also work fine. But in our case our database is not initialized. as we have a init.sql file where we have script to create a database, create a table and insert data inside the table. we need a database and one table for our dotnet app to work.

That's why we made it as LoadBalancer and later we do port forwarding to connect to the database using 127.0.0.1,1430
and then insert data manually by running the script (init.sql) and initialize our sql server 


PS F:\Docker\13. Changing our application little bit\BookStore.API> kubectl port-forward svc/mssql-service-bookapp 1430:1433 -n bookapp
Forwarding from 127.0.0.1:1430 -> 1433
Forwarding from [::1]:1430 -> 1433
Handling connection for 1430
Handling connection for 1430

Here Containers internal port 1433 (which is sql servers default port) is mapped to 1430.

open SSMS and connect to 127.0.0.1,1430 (username: sa, Password: EDMCore541)

Run init.sql script




See which port Ingress runs:

> kubectl get svc -n ingress-nginx
NAME                                 TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE
ingress-nginx-controller             LoadBalancer   10.102.113.232   <pending>     80:30851/TCP,443:30143/TCP   27h
ingress-nginx-controller-admission   ClusterIP      10.107.57.62     <none>        443/TCP                      27h

See which port our apps ingress runs:

> kubectl get ingress -n bookapp
NAME                      CLASS   HOSTS   ADDRESS   PORTS   AGE
ingress-service-bookapp   nginx   *                 80      57m



For both the case its port 80, so we need to do port forwarding on port 80.

> kubectl port-forward -n ingress-nginx svc/ingress-nginx-controller 8888:80
Forwarding from 127.0.0.1:8888 -> 80
Forwarding from [::1]:8888 -> 80
Handling connection for 8888
Handling connection for 8888


Now we can access our app at:  http://localhost:8888/






NOTE:------------------------------------------------------------------------------------------------------------------------

[Ingress] listens at port -> 80
nginx [ingress controller] -> rules (reverse proxy) 
            -> requests with prefix / forwards to [frontend service] which listens on port -> 3000
            -> requests with prefix /api forwards to [api service] which listens on port -> 80

[Frontend service] listens on port -> 3000 -> which forwards all request to [frontend pod] -> 8070
Angular nginx server inisde [frontend pod] listens at port -> 8070
nginx server inside [frontend pod] -> (reverse proxy)
            -> reverse proxys all request with path / to -> index.html static content
            -> reverse proxys all request with path /api/ to -> api service which listens on port -> 80

[api service] listens on port -> 80 -> which forwards all request to [api pod] -> 80
dotnet app inside [api pod] listens on port -> 80

[sql service] listens on port -> 1433 -> which forwards all requests to [sql pod] -> 1433
[sql server] inside sql pod listens on port -> 1433

